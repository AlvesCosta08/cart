// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: estoque.sql

package db

import (
	"context"
	"database/sql"
)

const createStock = `-- name: CreateStock :exec
INSERT INTO "estoque" (id_produto, quantidade_atual) VALUES ($1, $2) RETURNING id
`

type CreateStockParams struct {
	IDProduto       sql.NullInt32
	QuantidadeAtual int32
}

func (q *Queries) CreateStock(ctx context.Context, arg CreateStockParams) error {
	_, err := q.db.ExecContext(ctx, createStock, arg.IDProduto, arg.QuantidadeAtual)
	return err
}

const deleteStock = `-- name: DeleteStock :exec
DELETE FROM "estoque" WHERE id_produto = $1
`

func (q *Queries) DeleteStock(ctx context.Context, idProduto sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteStock, idProduto)
	return err
}

const getStockByProductID = `-- name: GetStockByProductID :one
SELECT id, id_produto, quantidade_atual, updated_at FROM "estoque" WHERE id_produto = $1
`

func (q *Queries) GetStockByProductID(ctx context.Context, idProduto sql.NullInt32) (Estoque, error) {
	row := q.db.QueryRowContext(ctx, getStockByProductID, idProduto)
	var i Estoque
	err := row.Scan(
		&i.ID,
		&i.IDProduto,
		&i.QuantidadeAtual,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStock = `-- name: UpdateStock :exec
UPDATE "estoque" SET quantidade_atual = $1 WHERE id_produto = $2
`

type UpdateStockParams struct {
	QuantidadeAtual int32
	IDProduto       sql.NullInt32
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) error {
	_, err := q.db.ExecContext(ctx, updateStock, arg.QuantidadeAtual, arg.IDProduto)
	return err
}
