// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: itens_no_carrinho.sql

package db

import (
	"context"
	"database/sql"
)

const addItemToCart = `-- name: AddItemToCart :exec
INSERT INTO "itens_no_carrinho" (cart_id, produto_id, quantidade, preco_unitario) VALUES ($1, $2, $3, $4) RETURNING id
`

type AddItemToCartParams struct {
	CartID        sql.NullInt32
	ProdutoID     sql.NullInt32
	Quantidade    int32
	PrecoUnitario string
}

func (q *Queries) AddItemToCart(ctx context.Context, arg AddItemToCartParams) error {
	_, err := q.db.ExecContext(ctx, addItemToCart,
		arg.CartID,
		arg.ProdutoID,
		arg.Quantidade,
		arg.PrecoUnitario,
	)
	return err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM "itens_no_carrinho" WHERE id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCartItem, id)
	return err
}

const getItemsByCartID = `-- name: GetItemsByCartID :many
SELECT id, cart_id, produto_id, quantidade, preco_unitario, created_at FROM "itens_no_carrinho" WHERE cart_id = $1
`

func (q *Queries) GetItemsByCartID(ctx context.Context, cartID sql.NullInt32) ([]ItensNoCarrinho, error) {
	rows, err := q.db.QueryContext(ctx, getItemsByCartID, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItensNoCarrinho
	for rows.Next() {
		var i ItensNoCarrinho
		if err := rows.Scan(
			&i.ID,
			&i.CartID,
			&i.ProdutoID,
			&i.Quantidade,
			&i.PrecoUnitario,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItem = `-- name: UpdateCartItem :exec
UPDATE "itens_no_carrinho" SET quantidade = $1, preco_unitario = $2 WHERE id = $3
`

type UpdateCartItemParams struct {
	Quantidade    int32
	PrecoUnitario string
	ID            int32
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) error {
	_, err := q.db.ExecContext(ctx, updateCartItem, arg.Quantidade, arg.PrecoUnitario, arg.ID)
	return err
}
