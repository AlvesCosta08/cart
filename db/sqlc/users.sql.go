// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "user" (nome, email, senha) VALUES ($1, $2, $3) RETURNING id_user
`

type CreateUserParams struct {
	Nome  string
	Email string
	Senha string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Nome, arg.Email, arg.Senha)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user" WHERE id_user = $1
`

func (q *Queries) DeleteUser(ctx context.Context, idUser int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, idUser)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id_user, nome, email, senha, created_at FROM "user"
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.IDUser,
			&i.Nome,
			&i.Email,
			&i.Senha,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id_user, nome, email, senha, created_at FROM "user" WHERE id_user = $1
`

func (q *Queries) GetUserByID(ctx context.Context, idUser int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, idUser)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.Nome,
		&i.Email,
		&i.Senha,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user" SET nome = $1, email = $2, senha = $3 WHERE id_user = $4
`

type UpdateUserParams struct {
	Nome   string
	Email  string
	Senha  string
	IDUser int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Nome,
		arg.Email,
		arg.Senha,
		arg.IDUser,
	)
	return err
}
