// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: produtos.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO "produto" (name, price, referencia, categoria_id) VALUES ($1, $2, $3, $4) RETURNING id_produto
`

type CreateProductParams struct {
	Name        string
	Price       string
	Referencia  sql.NullString
	CategoriaID sql.NullInt32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.Name,
		arg.Price,
		arg.Referencia,
		arg.CategoriaID,
	)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM "produto" WHERE id_produto = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, idProduto int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, idProduto)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id_produto, name, price, referencia, categoria_id, created_at FROM "produto" WHERE id_produto = $1
`

func (q *Queries) GetProductByID(ctx context.Context, idProduto int32) (Produto, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, idProduto)
	var i Produto
	err := row.Scan(
		&i.IDProduto,
		&i.Name,
		&i.Price,
		&i.Referencia,
		&i.CategoriaID,
		&i.CreatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE "produto" SET name = $1, price = $2, referencia = $3, categoria_id = $4 WHERE id_produto = $5
`

type UpdateProductParams struct {
	Name        string
	Price       string
	Referencia  sql.NullString
	CategoriaID sql.NullInt32
	IDProduto   int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.Name,
		arg.Price,
		arg.Referencia,
		arg.CategoriaID,
		arg.IDProduto,
	)
	return err
}
