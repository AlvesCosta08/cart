// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pedido.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO "pedido" (id_cliente, carrinho_id, status, total) VALUES ($1, $2, $3, $4) RETURNING id_pedido
`

type CreateOrderParams struct {
	IDCliente  sql.NullInt32
	CarrinhoID sql.NullInt32
	Status     string
	Total      string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.IDCliente,
		arg.CarrinhoID,
		arg.Status,
		arg.Total,
	)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM "pedido" WHERE id_pedido = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, idPedido int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, idPedido)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id_pedido, id_cliente, carrinho_id, status, total, created_at FROM "pedido" WHERE id_pedido = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, idPedido int32) (Pedido, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, idPedido)
	var i Pedido
	err := row.Scan(
		&i.IDPedido,
		&i.IDCliente,
		&i.CarrinhoID,
		&i.Status,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE "pedido" SET id_cliente = $1, carrinho_id = $2, status = $3, total = $4 WHERE id_pedido = $5
`

type UpdateOrderParams struct {
	IDCliente  sql.NullInt32
	CarrinhoID sql.NullInt32
	Status     string
	Total      string
	IDPedido   int32
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder,
		arg.IDCliente,
		arg.CarrinhoID,
		arg.Status,
		arg.Total,
		arg.IDPedido,
	)
	return err
}
