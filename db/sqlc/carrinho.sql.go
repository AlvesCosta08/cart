// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: carrinho.sql

package db

import (
	"context"
	"database/sql"
)

const createCart = `-- name: CreateCart :exec
INSERT INTO "carrinho" (user_id) VALUES ($1) RETURNING id
`

func (q *Queries) CreateCart(ctx context.Context, userID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, createCart, userID)
	return err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM "carrinho" WHERE id = $1
`

func (q *Queries) DeleteCart(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCart, id)
	return err
}

const getCartByID = `-- name: GetCartByID :one
SELECT id, cliente_id, user_id, total, status, created_at FROM "carrinho" WHERE id = $1
`

func (q *Queries) GetCartByID(ctx context.Context, id int32) (Carrinho, error) {
	row := q.db.QueryRowContext(ctx, getCartByID, id)
	var i Carrinho
	err := row.Scan(
		&i.ID,
		&i.ClienteID,
		&i.UserID,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateCart = `-- name: UpdateCart :exec
UPDATE "carrinho" SET user_id = $1 WHERE id = $2
`

type UpdateCartParams struct {
	UserID sql.NullInt32
	ID     int32
}

func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) error {
	_, err := q.db.ExecContext(ctx, updateCart, arg.UserID, arg.ID)
	return err
}
