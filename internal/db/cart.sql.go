// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package db

import (
	"context"
	"database/sql"
)

const addItemToCart = `-- name: AddItemToCart :exec
INSERT INTO cart_items (cart_id, product_id, quantity, price) VALUES ($1, $2, $3, $4)
`

type AddItemToCartParams struct {
	CartID    int32
	ProductID int32
	Quantity  int32
	Price     int32
}

func (q *Queries) AddItemToCart(ctx context.Context, arg AddItemToCartParams) error {
	_, err := q.db.ExecContext(ctx, addItemToCart,
		arg.CartID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	return err
}

const createCart = `-- name: CreateCart :one

INSERT INTO carts (user_id) VALUES ($1) RETURNING id
`

// db/queries/cart.sql
func (q *Queries) CreateCart(ctx context.Context, userID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, createCart, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listCartItems = `-- name: ListCartItems :many
SELECT id, cart_id, product_id, quantity, price FROM cart_items WHERE cart_id = $1
`

func (q *Queries) ListCartItems(ctx context.Context, cartID sql.NullInt32) ([]CartItem, error) {
	rows, err := q.db.QueryContext(ctx, listCartItems, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CartItem
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.CartID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const totalCartItems = `-- name: TotalCartItems :one
SELECT COUNT(*) FROM cart_items WHERE cart_id = $1
`

func (q *Queries) TotalCartItems(ctx context.Context, cartID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, totalCartItems, cartID)
	var count int32
	err := row.Scan(&count)
	return count, err
}

const totalCartValue = `-- name: TotalCartValue :one
SELECT SUM(quantity * price) FROM cart_items WHERE cart_id = $1
`

func (q *Queries) TotalCartValue(ctx context.Context, cartID sql.NullInt32) (int32, error) {
	row := q.db.QueryRowContext(ctx, totalCartValue, cartID)
	var sum int32
	err := row.Scan(&sum)
	return sum, err
}
